<HTML>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p><H1>Probabilities in the game of Risk</H1>

<p>In the game of risk you have to make decisions whether to attack and whether to just save your armies in case someone attacks you. It would be helpful to know what the probability of winning or losing is in various situations.

<p><b>Step 1. One dice roll</b>

<p><a href="https://editor.p5js.org/ChrisOrban/sketches/HJs8j8J0m">Click here to open a code that will make one dice roll per second</a>

<p><b>Step 2. Look at the code</b>

<p>Here is the code. Familiarize yourself with it.

<pre>
Ntrials = 0;
Nwin = 0.0;

function draw() { 
  background(240); // light gray
  frameRate(1); // per second
  
  diceval1 = rollDie(); // random integers between 1 and 6
  
  print(diceval1);  
  drawText("Dice1 value = " + diceval1,0.05*width,0.9*height);

  Ntrials += 1.0; 
  
  if (1 > 0) { // Note: 1 > 0 is always true
     Nwin += 1.0;
  }
  winfrac = Nwin/Ntrials;
  print(winfrac);
  
  graph1.addPoint(100*winfrac);
  graph1.display();
  drawText("Ntrials = " + Ntrials,0.25*width,0.8*height);
}
</pre>

<p><a href="risk_v0/index.html">Here is what this code will do when you run it. </a> As you can see it's not that interesting because the "win" condition is 1 > 0 which is always true. As a result the probability of winning (<code>100*winfrac</code>) is 100%

<p><b>Note:</b> If you were wondering why it says <code>diceval1</code> instead of just <code>diceval</code> it is because later we will introduce more dice and there will be variables <code>diceval2</code>, <code>diceval3</code>, etc.

<p><b>Step 3. Show a 50% win probability</b>

<p>If you add the code below to your code it will draw a horizontal line to indicate a 50% win probability

<pre>
  graph2.addPoint(50);
  graph2.display();
</pre>

<p>Now change the if statement to this:

<pre>
if (diceval1 > 3) {
   Nwin += 1.0;
}
</pre>

<p><a href="risk_v1/index.html">If you make these changes your code should behave like this.</a>   As you can see, the gray line is our best guess at what the win fraction is from the trials that we have done so far. 

<p><mark><b>Explain why diceval1 > 3 should be true exactly 50% of the time?</b></mark>



<p><b>Step 4. Impatience is a virtue!</b>

<p>Instead of rolling a dice once per second you can get the program to roll the dice 60 times a second by changing this line of code:

<p>Change this:

<pre>
frameRate(1); // per second
</pre>

<p>to this:

<pre>
frameRate(60); 
</pre>

<p><a href="risk_v2/index.html">If you make this change your code should behave like this</a>

<p><b>Note:</b> This change causes the draw() function to run 60 times per second. It turns out that this is about as fast as it can go. If you put a number significantly above 60 in frameRate you will find that it doesn't really go any faster.

<p><mark><b>Run the program a few times!</b><mark> and notice that sometimes the win fraction starts at 100% and moves towards 50%  and sometimes it starts at 0% and moves towards 50%. <b>Why is this?</b>

<p><b>Step 5. Let's get tricky</b>

<p>Let's make a change to the if statement so the win fraction is something other than 50%. 

<p>For example, change <code>diceval1 > 3</code> to something else like <code>diceval1 < 2</code> or <code>diceval1 > 4</code>. 

<p>Or perhaps change the if statement so that the dice value is equal to some number (example:  <code>diceval1 == 6</code>). Sometimes in a board game you get in situations where you have to roll a 6 or a 1 or something else in order to win.

<p><b><mark>Make this change, then do a calculation to figure out what the true win fraction should be!</mark></b> Then modify the <code>graph2.addPoint(50)</code> line of code so that it draws a line at the correct probability for whatever you modified the if statement to do.

<p>Answers will vary, <a href="risk_v3/index.html">but the result might look something like this</a>. 

<p><b><mark>Do not just change the number for the horizontal line until it looks right! Think about the answer that you should get! </mark></b>

<p><b>Step 6. The game of Risk, finally</b>

<p>The simplest scenario in the game of risk is when one player attacks another player and each player only has one army. According to the rules, the attacking player gets one dice and the defending player gets one dice. Whoever rolls the highest value will win the battle. If there is a tie, then the defender wins the battle.

<p><b>Step 6a. Add a second dice to the program</b>

<p>Our program only has one dice. Go ahead and add another dice with this code:

<pre>
  diceval2 = rollDie(); // random integers between 1 and 6
  print(diceval2);  
  drawText('Dice2 value = ' + diceval2,0.55*width,0.9*height);
</pre>

<p>Let's think of diceval1 as the attacking dice, and diceval2 as the defending dice.

<p><b>Step 6b. Modify the if statement</b>

<p>Now modify the if statement so that if diceval1 is larger than diceval2 then it will be a "win", but if diceval1 is less than diceval2 or if they are equal it will not be a win.

<p><a href="risk_v4/index.html">Your code should behave like this if modify the if statement correctly</a>

<p>It would be nice to add a horizontal line to the screen so we can see how long it takes to produce the "true" probability. We could do this by trial and error, but instead lets think about the combinations.

<p><b>Step 6c. Think about the combinations</b>

<p>When you roll two, six-sided dice there will be $6^2 = 36$ combinations. Unless the dice are weighted (in other words if someone is cheating) all 36 combinations are equally likely to occur. The question is how many of these combinations result in the attacking dice winning. 

<p><b>Note:</b> Remember that if the dice are the same value then the defender wins!

<p><b><mark>Fill in this table for whether the attacker or defender wins. Write A if the attacker wins and D if the defender wins</mark></b>

<p><img src="dice.png">

<p><b><mark>Of the 36 combinations how many of these would the attacking die wien?</mark></b>

<p><b>Step 6d. Show this probability in the code</b>

<p>Take the number of combinations where the attacker wins and divide it by 36 to get the win fraction. Then multiply by 100 to get the percentage. Then modify this line of code:

<pre>
  graph2.addPoint(50);
  graph2.display();
</pre>

<p>So that instead of showing the 50% probability as a horizontal line it shows whatever percentage you just determined.

<p><a href="risk_v5/index.html">If you make this change your code should behave like this</a>

<p><b>Step 7. Should you attack?</b>

<p>Based on what you found, would you go ahead with the 1 dice versus 1 dice attack? Why?

<p><b>Step 8. Two dice vs. one dice</b>

<p>You can increase your probability of winning by attacking the one die (one army)  with two dice instead of one. If the defending dice is greater than or equal to the larger of the two attacking dice, then the defender wins. But if the defending dice is less than the larger of the two attacking dice, then it is a win for the attacker.

<p><b>Note:</b> In the real game, you can do two dice versus one dice, lose the first round and then do 1v1 and potentially win. Here we will just consider this first round. In the real game, if you lose the first round of 2 vs 1, you will probably be reluctant to do 1 vs 1 because the probability of winning is less than 50%.

<p>Modify your code so that there are two attacking dice and one defending dice.  This will involve adding another line with the function <code>rollDie();</code>. This function (<code>rollDie()</code>) should now appear three times in the program because there are a total three dice being thrown.

<p><b>Advice #1: The function max(val1,val2) will return the larger of the two values. Use this to find the value </b>

<p><b>Advice #2:</b> Set the horizontal line back to 50%. We want to know if two dice vs one dice is more than 50% likely to win.


<p><a href="risk_v6/index.html">If you do this correctly your code might behave like this</a>

<p>In this link we have re-labeled dice 1 and dice 2 as attacking die and dice 3 is the defending dice.

<p><b>Optional Challenge: Step 9. Think about the combinations!</b>

<p>With three dice there are now $6^3 = 216$ combinations. How many of these have the attacking die winning? What does the win percentage work out to?

<p><b>Step 10. Three dice vs. one dice</b>

<p>Modify the code so that there are three attacking dice and one defending dice. What is the probability of winning now? 

<p><b>Advice:</b> With four dice involved this becomes nearly impossible to map out by hand, but  <a href="https://web.stanford.edu/~guertin/risk.notes.html">if you want you can look at this nerdy write up about the probabilities in Risk to double check your answer.</a>

<p><b>Step 11. Reflection</b>

<p>Now that you know the probability of winning an attack with one two and three dice versus one dice defending, do you have any thoughts on how you might play the game differently? Attack less? Attack more? Use more dice to attack? Less dice? Is the 3rd dice worth it? In a complex game like this there are no definitively right answers to this question but think about what you've learned might affect the way you play the game.




<!--
<p><b>Step 5. What if you had to roll a particular number to win?</b>

<p>Sometimes in board games, there are situations where you have to roll a particular number to win. Maybe it's 1. Maybe it's 6. Maybe it's something inbetween.

<p>Modify the code so that the if statement looks something like this:

<pre>
if (diceval1 == 1) {
   Nwin += 1.0;
}
</pre>

You can change this to diceval1 == 2 or diceval1 == 6, etc. It doesn't really matter. Choose your favorite number between 1 and 6.

<p>Make your changes and run the code. <a href="risk_v1/index.html">The code should behave like this</a>

<p><b>Step 3. Think about what the probability should be!</b> 

<p>As you probably know, the chance that the dice will equal any particular value is less than 50%. You can add the code below to help prove that this happens:

<pre>
  graph2.addPoint(50);
  graph2.display();
</pre>

<p>As you can see this draws a line at 50% probability on screen.

<p>

-->

<!--

<p><a href="http://alpha.editor.p5js.org/ChrisOrban/sketches/B1uBxFowG">One attacker, one defender</a>

<p><a href="http://alpha.editor.p5js.org/ChrisOrban/sketches/SJwJMoiPf">Two attackers, two defenders</a>

<p><a href="http://alpha.editor.p5js.org/ChrisOrban/sketches/ByV8dYiDz">Three attackers, two defenders</a>
-->
